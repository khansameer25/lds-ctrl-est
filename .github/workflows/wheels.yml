name: Build Python Wheels

on:
  push:
    branches: [test]
  pull_request:
    branches: [test]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies with vcpkg
        run: |
          # Bootstrap vcpkg if needed
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [ ! -f "./vcpkg/vcpkg.exe" ]; then
              ./vcpkg/bootstrap-vcpkg.bat
            fi
            # Install dependencies for Windows
            ./vcpkg/vcpkg install --triplet=x64-windows
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            if [ ! -f "./vcpkg/vcpkg" ]; then
              ./vcpkg/bootstrap-vcpkg.sh
            fi
            # Install dependencies for Linux
            ./vcpkg/vcpkg install --triplet=x64-linux
          else
            # macOS
            if [ ! -f "./vcpkg/vcpkg" ]; then
              ./vcpkg/bootstrap-vcpkg.sh
            fi
            # Install dependencies for macOS
            ./vcpkg/vcpkg install --triplet=x64-osx
          fi

      - name: Verify vcpkg installation
        run: |
          echo "Vcpkg installation directory:"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            ls -la vcpkg_installed/x64-windows/ || echo "Windows vcpkg directory not found"
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            ls -la vcpkg_installed/x64-linux/ || echo "Linux vcpkg directory not found"
          else
            ls -la vcpkg_installed/x64-osx/ || echo "macOS vcpkg directory not found"
          fi
          echo "Toolchain file:"
          ls -la vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          CIBW_BUILD: "cp311-*" # Build only Python 3.11 for faster iteration
          CIBW_SKIP: "pp*" # Skip PyPy builds (incompatible with pybind11)
          CIBW_ENVIRONMENT_MACOS: CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake CMAKE_PREFIX_PATH=${{ github.workspace }}/vcpkg_installed/x64-osx LDSCTRLEST_BUILD_PYTHON=ON
          CIBW_ENVIRONMENT_LINUX: CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake CMAKE_PREFIX_PATH=${{ github.workspace }}/vcpkg_installed/x64-linux LDSCTRLEST_BUILD_PYTHON=ON
          CIBW_ENVIRONMENT_WINDOWS: CMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake CMAKE_PREFIX_PATH=${{ github.workspace }}/vcpkg_installed/x64-windows LDSCTRLEST_BUILD_PYTHON=ON
          CIBW_BEFORE_BUILD_MACOS: echo "CMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE" && echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" && echo "LDSCTRLEST_BUILD_PYTHON=$LDSCTRLEST_BUILD_PYTHON" && ls -la ${{ github.workspace }}/vcpkg_installed/x64-osx/
          CIBW_BEFORE_BUILD_LINUX: echo "CMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE" && echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" && echo "LDSCTRLEST_BUILD_PYTHON=$LDSCTRLEST_BUILD_PYTHON" && ls -la ${{ github.workspace }}/vcpkg_installed/x64-linux/
          CIBW_BEFORE_BUILD_WINDOWS: echo "CMAKE_TOOLCHAIN_FILE=%CMAKE_TOOLCHAIN_FILE%" && echo "CMAKE_PREFIX_PATH=%CMAKE_PREFIX_PATH%" && echo "LDSCTRLEST_BUILD_PYTHON=%LDSCTRLEST_BUILD_PYTHON%" && dir ${{ github.workspace }}/vcpkg_installed/x64-windows/
          CIBW_TEST_COMMAND: python -c "import sys; print('Python version:', sys.version); print('Looking for ldsctrlest modules...'); import ldsctrlest; print('âœ… Import successful!')"
        with:
          package-dir: python

      - name: List built wheels
        run: |
          ls -la wheelhouse/ || dir wheelhouse\
          echo "Inspecting wheel contents:"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            for wheel in wheelhouse/*.whl; do
              echo "Contents of $wheel:"
              python -m zipfile -l "$wheel"
            done
          else
            unzip -l wheelhouse/*.whl
            echo "Looking for shared libraries:"
            unzip -Z wheelhouse/*.whl | grep -E '\.(so|dylib|dll)' || echo "No shared library files found"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
